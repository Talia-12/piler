use lalrpop_util::ErrorRecovery;
use piler::{tokens::Token, lexer::LexicalError};

grammar<'input, 'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

extern {
  type Location = usize;
  type Error = LexicalError;

	enum Token<'input> {
		"+"      => Token::Add,
		"-"      => Token::Sub,
		"*"      => Token::Mul,
		"/"	     => Token::Div,
		"("	     => Token::LBrace,
		")"	     => Token::RBrace,
		"identifier" => Token::Identifier(<&'input str>),
		"number" => Token::Number(u64),
	}
}

pub Expr: i64 = {
	<l:Expr> "+" <r:Factor> => l + r,
	<l:Expr> "-" <r:Factor> => l - r,
	Factor,
};

Factor: i64 = {
	<l:Factor> "*" <r:Term> => l * r,
	<l:Factor> "/" <r:Term> => l / r,
	Term,
};

Term: i64 = {
	Num,
	"(" <Expr> ")",
};

Num: i64 = {
	<"number"> => match <> {
		Token::Number(n) => n,
		_ => unreachable!()
	}
};